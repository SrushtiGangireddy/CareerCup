import java.io.*;
import java.util.*;
import java.util.Stack;

public class QueueUsingStacks {
	
	static class Queue{
		Stack<Integer> stack1;
		Stack<Integer> stack2;
	}
	
	static void push(Stack<Integer> st,int data) {
		st.push(data);
	}
	
	static int pop(Stack<Integer> st) {
		if(st.isEmpty())
			throw new RuntimeException("Cannot delete from an empty stack");
		return st.pop();
	}
	
	static void enqueue(Queue q,int data) {
		push(q.stack1,data);
	}
	
	static int dequeue(Queue q) {
		if(q.stack1.isEmpty() && q.stack2.isEmpty()) {
			throw new RuntimeException("Cannot delete from an empty queue");
		}
		if(q.stack2.isEmpty()) {
			while(!q.stack1.isEmpty()) {
				push(q.stack2,q.stack1.pop());
			}
		}
		return q.stack2.pop();
	}
	
	public static void main(String args[]) {
		Queue q=new Queue();
		q.stack1=new Stack<>();
		q.stack2=new Stack<>();
		enqueue(q, 1);
		enqueue(q, 2);
		enqueue(q, 3);
		enqueue(q, 4);
		enqueue(q, 5);
		enqueue(q, 6);
		System.out.println(dequeue(q));
		System.out.println(dequeue(q));
		System.out.println(dequeue(q));
		System.out.println(dequeue(q));
		
	}
	

	
}
